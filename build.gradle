buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("org.ysb33r.gradle:grolifant:0.16.1")
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id 'jacoco'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	jcenter()
}

jar {
	enabled = false
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation('it.ozimov:embedded-redis:0.7.3')
			{ exclude group: "org.slf4j", module: "slf4j-simple" }

	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation('it.ozimov:embedded-redis:0.7.3')
			{ exclude group: "org.slf4j", module: "slf4j-simple" }
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(false)

		def reportDirPath = "$buildDir/reports/code-coverage"

		html.destination file("$reportDirPath/${project.name}")
		xml.destination file("$reportDirPath/${project.name}.xml")
	}

	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Config*',
							'**/*Exception*',
							'**/*common*',
							'**/*Profile*'
					] + Qdomains)
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {

	def Qdomains = []

	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			element = 'CLASS'
			enabled = true

			excludes = [
					"**.*Application*",
					"**.*Config*",
					"**.*Exception*",
					"**.*common*",
					"**.*Profile*"
			] + Qdomains
		}
	}
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl.doFirst {
	if (file(querydslDir).exists()) {
		delete(file(querydslDir))
	}
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	finalizedBy 'copyDocument'
}

task copyDocument(type: Copy) {
	dependsOn bootJar
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}
